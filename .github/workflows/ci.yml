name: CI

on:
  push:
    branches: [main, develop, 'feat/**']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  lint-and-typecheck:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript type checking
        run: pnpm typecheck

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: gtsd_test
          POSTGRES_USER: gtsd
          POSTGRES_PASSWORD: gtsd_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run API tests with coverage
        run: pnpm --filter @gtsd/api test:coverage
        env:
          DATABASE_URL: postgresql://gtsd:gtsd_test_password@localhost:5432/gtsd_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Check coverage threshold
        run: |
          cd apps/api
          pnpm exec jest --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
        env:
          DATABASE_URL: postgresql://gtsd:gtsd_test_password@localhost:5432/gtsd_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload API coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage

  test-mobile:
    name: Test Mobile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Mobile tests with coverage
        run: pnpm --filter @gtsd/mobile test:coverage

      - name: Check coverage threshold
        run: |
          cd apps/mobile
          pnpm exec jest --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'

      - name: Upload Mobile coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  build:
    name: Build All Apps
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-api, test-mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Check for build artifacts
        run: |
          ls -la apps/api/dist
          echo "API build successful!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true